// Generated by gencpp from file fastlio/MapConvertRequest.msg
// DO NOT EDIT!


#ifndef FASTLIO_MESSAGE_MAPCONVERTREQUEST_H
#define FASTLIO_MESSAGE_MAPCONVERTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace fastlio
{
template <class ContainerAllocator>
struct MapConvertRequest_
{
  typedef MapConvertRequest_<ContainerAllocator> Type;

  MapConvertRequest_()
    : map_path()
    , save_path()
    , resolution(0.0)  {
    }
  MapConvertRequest_(const ContainerAllocator& _alloc)
    : map_path(_alloc)
    , save_path(_alloc)
    , resolution(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_path_type;
  _map_path_type map_path;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _save_path_type;
  _save_path_type save_path;

   typedef float _resolution_type;
  _resolution_type resolution;





  typedef boost::shared_ptr< ::fastlio::MapConvertRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fastlio::MapConvertRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MapConvertRequest_

typedef ::fastlio::MapConvertRequest_<std::allocator<void> > MapConvertRequest;

typedef boost::shared_ptr< ::fastlio::MapConvertRequest > MapConvertRequestPtr;
typedef boost::shared_ptr< ::fastlio::MapConvertRequest const> MapConvertRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fastlio::MapConvertRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fastlio::MapConvertRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fastlio::MapConvertRequest_<ContainerAllocator1> & lhs, const ::fastlio::MapConvertRequest_<ContainerAllocator2> & rhs)
{
  return lhs.map_path == rhs.map_path &&
    lhs.save_path == rhs.save_path &&
    lhs.resolution == rhs.resolution;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fastlio::MapConvertRequest_<ContainerAllocator1> & lhs, const ::fastlio::MapConvertRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fastlio

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fastlio::MapConvertRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fastlio::MapConvertRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fastlio::MapConvertRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fastlio::MapConvertRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fastlio::MapConvertRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fastlio::MapConvertRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fastlio::MapConvertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3107f9e4cf7e95be092905d828311cf";
  }

  static const char* value(const ::fastlio::MapConvertRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa3107f9e4cf7e95bULL;
  static const uint64_t static_value2 = 0xe092905d828311cfULL;
};

template<class ContainerAllocator>
struct DataType< ::fastlio::MapConvertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fastlio/MapConvertRequest";
  }

  static const char* value(const ::fastlio::MapConvertRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fastlio::MapConvertRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string map_path\n"
"string save_path\n"
"float32 resolution\n"
;
  }

  static const char* value(const ::fastlio::MapConvertRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fastlio::MapConvertRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_path);
      stream.next(m.save_path);
      stream.next(m.resolution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapConvertRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fastlio::MapConvertRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fastlio::MapConvertRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_path);
    s << indent << "save_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.save_path);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FASTLIO_MESSAGE_MAPCONVERTREQUEST_H
